knitr::opts_chunk$set(echo = TRUE)
# loading the nessary librearies
library(simmer)
library(dplyr)
library(ggplot2)
# Ensures consistent random values for reproducibility
set.seed(2002)
# declearting the varibles/Parameters
simulation_duration <- 480             # Total simulation time in minutes (8 hours = 480 min)
customer_arrival_rate <- 10 / 60       # 10 customers per hour = 1 every 6 mins ( Poisson distribution)
average_service_time <- 5              # Avg service time per customer in minutes ( Exp distribution)
customer_flow <- trajectory("Customer Flow") %>%
seize("service_counter", 1) %>%                              # Take one service counter
timeout(function() rexp(1, 1 / average_service_time)) %>%    # Service time (randomly generated)
release("service_counter", 1)                                # Release counter after service
# Defining a Function for Simulating the bank system for a given number of counters
simulate_bank_service <- function(number_of_counters) {
# Create a simulation environment
bank_simulation <- simmer(paste("Bank ", number_of_counters, "Counter(s)")) %>%
add_resource("service_counter", capacity = number_of_counters) %>%                       # Add counters
add_generator("Customer", customer_flow, function() rexp(1, customer_arrival_rate)) %>%  # Add custmr
run(until = simulation_duration)                                                         # Run sim
# Collect logs
resource_logs <- get_mon_resources(bank_simulation)  # Logs about counter usage
arrival_logs <- get_mon_arrivals(bank_simulation)    # Logs about each customer
# Calculate customer waiting times
arrival_logs$total_waiting_time <- arrival_logs$end_time - arrival_logs$start_time  # Total time in sys
arrival_logs$pure_waiting_time <- arrival_logs$total_waiting_time - arrival_logs$activity_time  #Only queue time
# Calculate key performance metrics
avg_total_wait <- mean(arrival_logs$total_waiting_time, na.rm = TRUE)    # Includes service time
avg_actual_wait <- mean(arrival_logs$pure_waiting_time, na.rm = TRUE)    # Just waiting time
avg_queue_length <- mean(resource_logs$queue, na.rm = TRUE)              # Avg number in queue
# Server utilization (how much busy the counters were)
total_time_busy <- sum(arrival_logs$activity_time, na.rm = TRUE)
total_time_available <- simulation_duration * number_of_counters
server_utilization <- total_time_busy / total_time_available
# PRINT RESULTS -----
cat("\n--- Results:", number_of_counters, "Counter(s) ---\n")
cat("Avg Waiting Time (including service time):", round(avg_total_wait, 2), "mins\n")
cat("Avg Waiting Time (only in queue, excluding service):", round(avg_actual_wait, 2), "mins\n")
cat("Average Queue Length:", round(avg_queue_length, 2), "\n")
cat("Server Utilization:", round(server_utilization * 100, 2), "%\n")
# Return all useful outputs
return(list(
resource_logs = resource_logs,
arrival_logs = arrival_logs,
avg_queue_length = avg_queue_length,
avg_total_wait = avg_total_wait,
avg_actual_wait = avg_actual_wait,
utilization = server_utilization
))
}
results_counter_2 <- simulate_bank_service(2)  # Simulate with 2 counters
View(simulate_bank_service)
View(simulate_bank_service)
View(results_counter_2)
View(results_counter_2)
results_counter_3 <- simulate_bank_service(3)  # Simulate with 3 counters
results_counter_1 <- simulate_bank_service(1)  # Simulate with 1 counter
# Create DataFrame for 2 and 3 counters
df_23 <- data.frame(
Counters = c(2, 3),
Avg_Queue_Length = c(results_counter_2$avg_queue_length, results_counter_3$avg_queue_length),
Avg_Waiting_Time = c(results_counter_2$avg_actual_wait, results_counter_3$avg_actual_wait),
Utilization = c(results_counter_2$utilization, results_counter_3$utilization)
)
# Bar Chart: Avg Waiting Time with 15-min Threshold
ggplot(df_23, aes(x = factor(Counters), y = Avg_Waiting_Time)) +
geom_bar(stat = "identity", fill = "blue") +
geom_hline(yintercept = 15, color = "red", linetype = "dashed", size = 1) +
labs(title = "Avg Waiting Time vs Counters (Threshold = 15 mins)",
x = "Number of Counters", y = "Avg Waiting Time (mins)") +
theme_minimal()
# Bar Chart: Server Utilization
ggplot(df_23, aes(x = factor(Counters), y = Utilization * 100)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(title = "Server Utilization vs Counters", x = "Number of Counters", y = "Utilization (%)") +
theme_minimal()
# Line Chart: Avg Queue Length Over Time
r2 <- results_counter_2$resource_logs
r3 <- results_counter_3$resource_logs
r2$counter <- "2 Counters"
r3$counter <- "3 Counters"
queue_df <- rbind(r2, r3)
ggplot(queue_df, aes(x = time, y = queue, color = counter)) +
geom_line(size = 0.5) +
labs(title = "Queue Length Over Time (2 vs 3 Counters)",
x = "Time (mins)", y = "Queue Length") +
theme_minimal()
View(df_23)
knitr::opts_chunk$set(echo = TRUE)
# loading the nessary librearies
library(simmer)
library(dplyr)
library(ggplot2)
# Ensures consistent random values for reproducibility
set.seed(2002)
# declearting the varibles/Parameters
simulation_duration <- 480             # Total simulation time in minutes (8 hours = 480 min)
customer_arrival_rate <- 10 / 60       # 10 customers per hour = 1 every 6 mins ( Poisson distribution)
average_service_time <- 5              # Avg service time per customer in minutes ( Exp distribution)
customer_flow <- trajectory("Customer Flow") %>%
seize("service_counter", 1) %>%                              # Take one service counter
timeout(function() rexp(1, 1 / average_service_time)) %>%    # Service time (randomly generated)
release("service_counter", 1)                                # Release counter after service
# Defining a Function for Simulating the bank system for a given number of counters
simulate_bank_service <- function(number_of_counters) {
# Create a simulation environment
bank_simulation <- simmer(paste("Bank ", number_of_counters, "Counter(s)")) %>%
add_resource("service_counter", capacity = number_of_counters) %>%                       # Add counters
add_generator("Customer", customer_flow, function() rexp(1, customer_arrival_rate)) %>%  # Add custmr
run(until = simulation_duration)                                                         # Run sim
# Collect logs
resource_logs <- get_mon_resources(bank_simulation)  # Logs about counter usage
arrival_logs <- get_mon_arrivals(bank_simulation)    # Logs about each customer
# Calculate customer waiting times
arrival_logs$total_waiting_time <- arrival_logs$end_time - arrival_logs$start_time  # Total time in sys
arrival_logs$pure_waiting_time <- arrival_logs$total_waiting_time - arrival_logs$activity_time  #Only queue time
# Calculate key performance metrics
avg_total_wait <- mean(arrival_logs$total_waiting_time, na.rm = TRUE)    # Includes service time
avg_actual_wait <- mean(arrival_logs$pure_waiting_time, na.rm = TRUE)    # Just waiting time
avg_queue_length <- mean(resource_logs$queue, na.rm = TRUE)              # Avg number in queue
# Server utilization (how much busy the counters were)
total_time_busy <- sum(arrival_logs$activity_time, na.rm = TRUE)
total_time_available <- simulation_duration * number_of_counters
server_utilization <- total_time_busy / total_time_available
# PRINT RESULTS -----
cat("\n--- Results:", number_of_counters, "Counter(s) ---\n")
cat("Avg Waiting Time (including service time):", round(avg_total_wait, 2), "mins\n")
cat("Avg Waiting Time (only in queue, excluding service):", round(avg_actual_wait, 2), "mins\n")
cat("Average Queue Length:", round(avg_queue_length, 2), "\n")
cat("Server Utilization:", round(server_utilization * 100, 2), "%\n")
# Return all useful outputs
return(list(
resource_logs = resource_logs,
arrival_logs = arrival_logs,
avg_queue_length = avg_queue_length,
avg_total_wait = avg_total_wait,
avg_actual_wait = avg_actual_wait,
utilization = server_utilization
))
}
View(customer_flow)
results_counter_2 <- simulate_bank_service(2)  # Simulate with 2 counters
View(results_counter_2)
results_counter_3 <- simulate_bank_service(3)  # Simulate with 3 counters
results_counter_1 <- simulate_bank_service(1)  # Simulate with 1 counter
# Create DataFrame for 2 and 3 counters
df_23 <- data.frame(
Counters = c(2, 3),
Avg_Queue_Length = c(results_counter_2$avg_queue_length, results_counter_3$avg_queue_length),
Avg_Waiting_Time = c(results_counter_2$avg_actual_wait, results_counter_3$avg_actual_wait),
Utilization = c(results_counter_2$utilization, results_counter_3$utilization)
)
# Bar Chart: Avg Waiting Time with 15-min Threshold
ggplot(df_23, aes(x = factor(Counters), y = Avg_Waiting_Time)) +
geom_bar(stat = "identity", fill = "blue") +
geom_hline(yintercept = 15, color = "red", linetype = "dashed", size = 1) +
labs(title = "Avg Waiting Time vs Counters (Threshold = 15 mins)",
x = "Number of Counters", y = "Avg Waiting Time (mins)") +
theme_minimal()
# Bar Chart: Server Utilization
ggplot(df_23, aes(x = factor(Counters), y = Utilization * 100)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(title = "Server Utilization vs Counters", x = "Number of Counters", y = "Utilization (%)") +
theme_minimal()
# Line Chart: Avg Queue Length Over Time
r2 <- results_counter_2$resource_logs
r3 <- results_counter_3$resource_logs
r2$counter <- "2 Counters"
r3$counter <- "3 Counters"
queue_df <- rbind(r2, r3)
ggplot(queue_df, aes(x = time, y = queue, color = counter)) +
geom_line(size = 0.5) +
labs(title = "Queue Length Over Time (2 vs 3 Counters)",
x = "Time (mins)", y = "Queue Length") +
theme_minimal()
View(df_23)
View(r2)
View(r3)
# Combined Data for all 3
df_all <- data.frame(
Counters = c(1, 2, 3),
Avg_Queue_Length = c(results_counter_1$avg_queue_length,
results_counter_2$avg_queue_length,
results_counter_3$avg_queue_length),
Avg_Waiting_Time = c(results_counter_1$avg_actual_wait,
results_counter_2$avg_actual_wait,
results_counter_3$avg_actual_wait),
Utilization = c(results_counter_1$utilization,
results_counter_2$utilization,
results_counter_3$utilization)
)
# Waiting Time with Threshold
ggplot(df_all, aes(x = factor(Counters), y = Avg_Waiting_Time)) +
geom_bar(stat = "identity", fill = "gray") +
geom_hline(yintercept = 15, color = "red", linetype = "dashed", size = 1) +
labs(title = "Avg Waiting Time (All Counters)", x = "Counters", y = "Avg Waiting Time (mins)") +
theme_minimal()
# Utilization
ggplot(df_all, aes(x = factor(Counters), y = Utilization * 100)) +
geom_bar(stat = "identity", fill = "purple") +
labs(title = "Utilization  (All Counters)", x = "Counters", y = "Utilization (%)") +
theme_minimal()
# Queue Length Over Time – All
r1 <- results_counter_1$resource_logs
r1$counter <- "1 Counter"
queue_all <- rbind(r1, r2, r3)
ggplot(queue_all, aes(x = time, y = queue, color = counter)) +
geom_line() +
labs(title = "Queue Length Over Time (All Counters)",
x = "Time (mins)", y = "Queue Length") +
theme_minimal()
View(df_all)
